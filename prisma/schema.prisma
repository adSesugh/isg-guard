// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  email     String     @unique
  username  String     @unique
  guardID   String?    @unique
  role      Role       @default(FLAT_OWNER)
  initials  String
  photoUrl  String?
  status    Status     @default(ACTIVE)
  password  String
  createdAt DateTime   @default(now()) @db.Timestamp()
  updatedAt DateTime   @default(now()) @db.Timestamp()
  FlatOwner FlatOwner?

  @@map("users")
}

model Society {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  location  String?
  towers    Tower[]
  guards    Guard[]
  createdAt DateTime  @default(now()) @db.Timestamp()
  updatedAt DateTime? @default(now()) @db.Timestamp()

  @@map("societies")
}

model Tower {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  address     Address?
  flats       Flat[]
  createdAt   DateTime   @default(now()) @db.Timestamp()
  updatedAt   DateTime?  @default(now()) @db.Timestamp()
  FlatOwner   FlatOwner? @relation(fields: [flatOwnerId], references: [id])
  flatOwnerId String?    @db.ObjectId
  Society     Society?   @relation(fields: [societyId], references: [id])
  societyId   String?    @db.ObjectId

  @@map("towers")
}

model Guard {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  societyId   String    @db.ObjectId
  number      String    @unique
  firstName   String
  lastName    String
  phoneNumber String
  email       String
  address     Address?
  status      Status    @default(ACTIVE)
  createdAt   DateTime  @default(now()) @db.Timestamp()
  updatedAt   DateTime? @default(now()) @db.Timestamp()
  Society     Society   @relation(fields: [societyId], references: [id])

  @@map("guards")
}

model Flat {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  number    String     @unique
  name      String?
  societyId String     @unique @db.ObjectId
  towerId   String     @unique @db.ObjectId
  createdAt DateTime   @default(now())
  updatedAt DateTime?  @default(now()) @db.Timestamp()
  Tower     Tower      @relation(fields: [towerId], references: [id])
  FlatOwner FlatOwner?

  @@map("flats")
}

model FlatOwner {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  firstName    String
  lastName     String
  flatNumber   String?
  email        String
  phoneNumber  String?
  dateOfBirth  DateTime?
  flatId       String?       @unique @db.ObjectId
  address      Address?
  latitude     Float?
  longitude    Float?
  userId       String        @unique @db.ObjectId
  appointments Appointment[]
  status       Status        @default(ACTIVE)
  createdAt    DateTime?     @default(now()) @db.Timestamp()
  updatedAt    DateTime?     @default(now()) @db.Timestamp()
  Tower        Tower[]
  User         User          @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Flat         Flat?         @relation(fields: [flatId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("flatOwners")
}

model Appointment {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  visitorNumber String
  phoneNumber   String?
  email         String
  purpose       String?
  photoUrl      String
  status        Status     @default(ACTIVE)
  createdAt     DateTime   @default(now()) @db.Timestamp()
  updatedAt     DateTime?  @default(now()) @db.Timestamp()
  FlatOwner     FlatOwner? @relation(fields: [flatOwnerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  flatOwnerId   String?    @db.ObjectId

  @@map("appointments")
}

enum Role {
  GUARD
  FLAT_OWNER
  SOCIETY_AGENT
}

enum Status {
  ACTIVE
  INACTIVE
  SUSPENDED
}

type Address {
  street String
  city   String
  state  String
  zip    String
}
